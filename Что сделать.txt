
Влад:
Структура расположения кода в проекте почекать
Стили лучше делить по компонентам: т.е. корзина-  внутри style + JS, лучше сделать общий стайл и в него ссылки на все (вроде через модуль) или много файлов в отдельной папке
Картинки: обычно хранятся в более четких названиях и папки разные под разные блоки
 

HTML + общие
+1. Убираем пустые теги и упращаем кол-во тегов
+2. Пустые места и т.п. убираем (даже пробелы)
3. Кнопка показать еще можно сделать удобнее: вытащить из goods list и сделать еще один div (т.е. goods-list+more-btn-place в диве) 
+4. tittle поменять
+5. My shop сделать h1 а не span
 

CSS:
+1. Пропуск после каждого стиля
+2. Стараться стили в алфавитном порядке внутри класса
+3. Классы от более общих к более узким (т.е. по древу, хэдеры-мэйны и такие общие делать вверху, а которые по дому глубже - по дереву list-> item, list2...)
+4. Медиа запросы лучше внизу все хранить
+5. Между селектоором и скобкой пробелы лучше ставить
6. Цвета лучше делать через переменные 


JS:
(basket.js)
+1. Переменные basketGoods через let 
2. Конструктор вначале хорошо, но переменную назвать логически 
3. Лучше то, что вызывает пониже класть. Например: addItem вызывает addBasket
4. После скобки пустое место лучше делать, пробел лучше убирать не constructor (a){.. а constructor(a) {...
5. Русский язык лучше убирать
6. Лишние консоль логи убирать. 
7. НЕ ИСПОЛЬЗОВАТЬ при удалении и подобных функциях parrent element, nex sibling  т.п. т.к. может быть еще один контейнер какой
+8. basketGoods закинуть в класс через public переменную
+9. присваивать айдишник каждому товару в т.ч. в корзине, чтоб мы по нему могли найти и удалить объект, вместо п.7, при рендере это можно сделать.
10. Private, public, protected - чекнуть !!!
+11. Minus, Pluscount - засунуть в класс
12. В классах сделать let изучив п.10
+13. Class GoodItem не должен находить место где ему делать, максимальное разделение ответственности, т.е. gooditem должен сам себя отрисовывать и работать, а Commonlist должен находить иесто где рендерить goodslist. Делать публичную переменную в Commonlist в нее передавать место для рендера, Commonlist будет запускать рендер Good передавай в него место для render (они друг у друге не знают, т.е. не обмениваются переменными).
commonlist создаем public body, в конструкторе его отриисовываем и в определенный момент запускаем метод, который вот так выглядит: addgood = (good: Good(класс)) +>{this.body.append(good.body)}
14. Между двумя разными конструкциями ставить enter




Кнопку удалить товар из корзины и кнопка обновить количество. 
+++Всплывающие уведомления: товар добавлен в корзину + товары закончились


